agriculture_stat <- pivot_longer(agriculture_stat,
c("Mean", "Min", "Max", "Percent_25",
"Percent_75"), names_to = "statistic",
values_to = "val")
ggplot(data = agriculture_stat, aes(x=as.numeric(year), y=val)) +
geom_line(aes(color = statistic))+
geom_point(aes(color = statistic))+
labs(title = "Distribution of Agriculture",
subtitle = "Average/Min/Max/Percentile at 25 and 75",
x = "Years",
y = "Agriculture",
color = "statistic")+
theme(axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
agriculture_pivotlonger <- agriculture %>% gather(year, val, '1990':'2016',
factor_key=TRUE) %>%
arrange(Country.Name)
agriculture_stat <- group_by(agriculture_pivotlonger, year)
agriculture_stat <- summarise(agriculture_stat,
Mean=mean(val, na.rm=TRUE),
Min=min(val, na.rm=TRUE),
Max=max(val, na.rm=TRUE),
Percent_25=quantile(val, probs=c(.25), na.rm=TRUE),
Percent_75=quantile(val, probs=c(.75), na.rm=TRUE))
agriculture_stat <- pivot_longer(agriculture_stat,
c("Mean", "Min", "Max", "Percent_25",
"Percent_75"), names_to = "statistic",
values_to = "val")
ggplot(data = agriculture_stat, aes(x=as.numeric(year), y=val)) +
geom_line(aes(color = statistic))+
geom_point(aes(color = statistic))+
labs(title = "Distribution of Agriculture",
subtitle = "Average/Min/Max/Percentile at 25 and 75",
x = "Years",
y = "Agriculture",
color = "statistic")+
theme(axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
Top10_agriculture <- agriculture_pivotlonger %>% group_by(Country.Code) %>%
summarise(Average = mean(val, na.rm=TRUE))%>%
arrange(desc(Average)) %>% head(10) %>%
left_join(agriculture, by=c("Country.Code")) %>%
pivot_longer(prepare_longer, names_to = "year", values_to = "val") %>%
mutate(Country.Name = fct_reorder2(Country.Name, year, val))
ggplot(data = Top10_agriculture, aes(x=as.numeric(year), y=val)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries Agriculture",
x = "Years",
y = "% Agriculture per GDP",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
#world map for landlocked countries
landlocked_countries$dummy <- 1
mapped_data<- joinCountryData2Map(landlocked_countries, joinCode = "ISO3", nameJoinColumn = "Country.Code3", verbose = FALSE)
par(mai = c(0,0,0.2,0),xaxs="i",yaxs="i")
mapCountryData(mapped_data,nameColumnToPlot = "dummy", mapTitle = "Landlocked countries",missingCountryCol = "grey",addLegend = FALSE, catMethod = "categorical")
pm25_season_plot <- ggplot(data=airquality_season,aes(x=month,y=MonthlyAveragepm25))+                     geom_boxplot()+ labs(y="PM2.5")
co_season_plot <- ggplot(data=airquality_season, aes(x=month, y=MonthlyAverageco))+
geom_boxplot()+labs(y="CO")
pm10_season_plot <- ggplot(data=airquality_season,aes(x=month,y=MonthlyAveragepm10))+
geom_boxplot()+labs(y="PM10")
o3_season_plot <- ggplot(data=airquality_season, aes(x=month, y=MonthlyAverageo3))+
geom_boxplot()+labs(y="O3")
so2_season_plot <- ggplot(data=airquality_season, aes(x=month, y=MonthlyAverageso2))+
geom_boxplot()+labs(y="SO2")
no2_season_plot <- ggplot(data=airquality_season, aes(x=month, y=MonthlyAverageno2))+
geom_boxplot()+labs(y="NO2")
P <- plot_grid(pm25_season_plot,co_season_plot,pm10_season_plot,o3_season_plot,so2_season_plot,no2_season_plot,ncol = 2)
title <- ggdraw() + draw_label("Distributions of each air pollutant by month", fontface = 'bold')
plot_grid(title, P, ncol=1, rel_heights = c(0.1,1))
airquality_seasonav <- airquality_season %>% group_by(Country.Name) %>%
summarise(Averagepm25 = mean(MonthlyAveragepm25),
Averageco = mean(MonthlyAverageco),
Averagepm10 = mean(MonthlyAveragepm10),
Averageo3 = mean(MonthlyAverageo3),
Averageso2 = mean(MonthlyAverageso2),
Averageno2 = mean(MonthlyAverageno2))
Top10_PM25 <- airquality_seasonav %>% arrange(desc(Averagepm25)) %>% head(10) %>%
left_join(airquality_season, by=c("Country.Name")) %>%
mutate(Country.Name = fct_reorder2(Country.Name, month,
MonthlyAveragepm25))
Top10_CO <- airquality_seasonav %>% arrange(desc(Averageco)) %>% head(10) %>%
left_join(airquality_season, by=c("Country.Name")) %>%
mutate(Country.Name = fct_reorder2(Country.Name, month,
MonthlyAverageco))
Top10_PM10 <- airquality_seasonav %>% arrange(desc(Averagepm10)) %>% head(10) %>%
left_join(airquality_season, by=c("Country.Name")) %>%
mutate(Country.Name = fct_reorder2(Country.Name, month,
MonthlyAveragepm10))
Top10_O3 <- airquality_seasonav %>% arrange(desc(Averageo3)) %>% head(10) %>%
left_join(airquality_season, by=c("Country.Name")) %>%
mutate(Country.Name = fct_reorder2(Country.Name, month,
MonthlyAverageo3))
Top10_SO2 <- airquality_seasonav %>% arrange(desc(Averageso2)) %>% head(10) %>%
left_join(airquality_season, by=c("Country.Name")) %>%
mutate(Country.Name = fct_reorder2(Country.Name, month,
MonthlyAverageso2))
Top10_NO2 <- airquality_seasonav %>% arrange(desc(Averageno2)) %>% head(10) %>%
left_join(airquality_season, by=c("Country.Name")) %>%
mutate(Country.Name = fct_reorder2(Country.Name, month,
MonthlyAverageno2))
ggplot(data = Top10_PM25, aes(x=as.numeric(month), y=MonthlyAveragepm25)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries PM2.5",
x = "Months",
y = "PM2.5",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold")) +
scale_x_continuous(breaks = pretty_breaks())
ggplot(data = Top10_CO, aes(x=as.numeric(month), y=MonthlyAverageco)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries CO",
x = "Months",
y = "CO",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold")) +
scale_x_continuous(breaks = pretty_breaks())
ggplot(data = Top10_PM10, aes(x=as.numeric(month), y=MonthlyAveragepm10)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries PM10",
x = "Months",
y = "PM10",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold")) +
scale_x_continuous(breaks = pretty_breaks())
ggplot(data = Top10_O3, aes(x=as.numeric(month), y=MonthlyAverageo3)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries O3",
x = "Months",
y = "O3",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold")) +
scale_x_continuous(breaks = pretty_breaks())
ggplot(data = Top10_SO2, aes(x=as.numeric(month), y=MonthlyAverageso2)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries SO2",
x = "Months",
y = "SO2",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold")) +
scale_x_continuous(breaks = pretty_breaks())
ggplot(data = Top10_NO2, aes(x=as.numeric(month), y=MonthlyAverageno2)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries NO2",
x = "Months",
y = "NO2",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold")) +
scale_x_continuous(breaks = pretty_breaks())
Top10_agriculture <- agriculture_pivotlonger %>% group_by(Country.Code) %>%
summarise(Average = mean(val, na.rm=TRUE))%>%
arrange(desc(Average)) %>% head(10) %>%
left_join(agriculture, by=c("Country.Code")) %>%
gather(year, val, '1990':'2016', factor_key=TRUE) %>%
arrange(desc(Average)) %>%
mutate(Country.Name = fct_reorder2(Country.Name, year, val))
ggplot(data = Top10_agriculture, aes(x=as.numeric(year), y=val)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries Agriculture",
x = "Years",
y = "% Agriculture per GDP",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
"Statistics of total death rate by country in 1990"
"Statistics of total death rate by country in 1990"
year1990 <- min(mortality_rate_country_wide$year) #1990
print("A")
print("Statistics of total death rate by country in 2019", row.names = FALSE)
print(as.data.frame("Statistics of total death rate by country in 2019"), row.names = FALSE)
print(as.data.frame("Statistics of total death rate by country in 2019"), row.names = FALSE)
print(as.data.frame(("Statistics of total death rate by country in 2019"), row.names = FALSE)
x
cat("Statistics of total death rate by country in 2019")
source(here::here("scripts/setup.R"))
iso_country_codes <-read.csv(here::here("data/iso_country_codes.csv"), header = TRUE)
kable(iso_country_codes[1:5, ], caption = "The original iso_country_codes table") %>% kable_styling(bootstrap_options = "bordered")
iso_country_codes <- iso_country_codes[,-c(4)]
iso_country_codes <- iso_country_codes %>%
rename(c(Country.Name="Country"),
c(Country.Code3 ="Alpha.3.code"),
c(Country.Code2 ="Alpha.2.code"))
kable(iso_country_codes[1:5, ], caption = "After selecting only relevant variables")  %>% kable_styling(bootstrap_options = "bordered")
Airpol <- read.csv(here::here("data/pm2.5.csv"), header = TRUE, dec = "." )
Airpol <- filter(Airpol, !Country.Name == "") #remove last 5 rows
colnames(Airpol) <- sub("..YR.*","",sub("X","",colnames(Airpol)))
Airpol[Airpol == ".."] = NA
Airpol[,5:54] <- sapply(Airpol[,c(5:54)], as.numeric)
checknaindex_airpol <- which(colSums(!is.na(Airpol))==0)
Airpol <- Airpol[-checknaindex_airpol]
Airpol <- Airpol[-c(1:2)]
# Countries that not appear in the Table 0 - ISO Country Codes
checkna_airpol <- Airpol%>%
arrange(Country.Name)%>%
select(Country.Name, Country.Code) %>%
unique() %>%
left_join(iso_country_codes,
by=c ("Country.Code" = "Country.Code3"))
checkna_airpol <- checkna_airpol[is.na(checkna_airpol[,c("Country.Name.y")]),]
checkna_airpol <- checkna_airpol%>%
rename(Country.Name = "Country.Name.x")%>%
select(Country.Name)
rownames(checkna_airpol) <- 1:nrow(checkna_airpol)
#Create table considering countries from Table 0 - ISO Country Codes
Airpol <- Airpol%>%
arrange(Country.Name)%>%
right_join(iso_country_codes,
by=c ("Country.Code" = "Country.Code3"))%>%
rename(Country.Name = "Country.Name.y")%>%
select(-Country.Name.x, -Country.Code2)%>%
relocate(Country.Name, .before= Country.Code)%>%
mutate_if(is.numeric, round, digits=4)
#Countries with empty values across all years
missing_data_airpol <- Airpol[rowSums(is.na(select(Airpol,3:14)))
== ncol(select(Airpol,3:14)), ]
missing_data_airpol <- missing_data_airpol%>%
select(Country.Name)%>%
arrange(Country.Name)
rownames(missing_data_airpol) <- 1:nrow(missing_data_airpol)
# Final Table for Airpol
Airpol <- Airpol[rowSums(is.na(select(Airpol,3:14)))
!= ncol(select(Airpol,3:14)), ]
kable(Airpol[1:5, ], caption = "Identifying the most deadliest deseases caused by air pollutants")  %>% kable_styling(bootstrap_options = "bordered")
View(Airpol)
mortality_rate <- read.csv(here::here("data/mortality_rate.csv"), header = TRUE, dec = ".")
mortality_rate[,8:11] <- sapply(mortality_rate[,c(8:11)], as.numeric)
mortality_rate <- mortality_rate%>%
mutate_if(is.numeric, round, digits=4)%>%
arrange(year)%>%
select(-upper, -lower, -rei)
mortality_rate_wider <- mortality_rate%>%
pivot_wider(names_from = year, values_from = val)
mortality <- mortality_rate_wider%>%
mutate(Total = select(., '1990':'2019') %>%
rowSums(na.rm = TRUE))%>%
relocate(Total, .before = '1990')%>%
arrange(desc(Total))
top.5_diseases <- mortality_rate[mortality_rate$cause %in%
c("Ischemic heart disease","Chronic obstructive pulmonary disease",
"Intracerebral hemorrhage","Ischemic stroke",
"Lower respiratory infections"),]
kable(mortality[1:5,1:16], caption = "Identifying the most deadliest deseases caused by air pollutants (E.g. 1990-1998)")  %>% kable_styling(bootstrap_options = "bordered")
View(mortality)
View(mortality_rate_wider)
mortality_rate_wider <- mortality_rate %>%
pivot_wider(names_from = year, values_from = val)
mortality <- mortality_rate_wider %>%
mutate(Total = select(., '1990':'2019') %>%
rowSums(na.rm = TRUE))%>%
relocate(Total, .before = '1990')%>%
arrange(desc(Total))
top.5_diseases <- mortality_rate[mortality_rate$cause %in%
c("Ischemic heart disease","Chronic obstructive pulmonary disease",
"Intracerebral hemorrhage","Ischemic stroke",
"Lower respiratory infections"),]
# Visualization
ggplot(top.5_diseases, aes(x = year, y = val)) +
geom_line(aes(color = cause))+
geom_point(aes(color = cause))+
labs(title = "Global Mortality Rate Diseases",
subtitle = "Top 5 deadliest diseases caused by air pollutants per 100k deaths",
x = "Years",
y = "Mortality Rate (per 100k people)",
color = "Diseases")+
theme(axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
View(mortality_rate_wider)
mortality_rate_wider <- mortality_rate %>%
pivot_wider(names_from = year, values_from = val)
View(mortality_rate_wider)
View(mortality_rate)
mortality_rate <- read.csv(here::here("data/mortality_rate.csv"), header = TRUE, dec = ".")
mortality_rate[,8:11] <- sapply(mortality_rate[,c(8:11)], as.numeric)
mortality_rate <- mortality_rate%>%
mutate_if(is.numeric, round, digits=4)%>%
arrange(year)%>%
select(-upper, -lower, -rei)
mortality_rate_wider <- mortality_rate%>%
pivot_wider(names_from = year, values_from = val)
mortality <- mortality_rate_wider%>%
mutate(Total = select(., '1990':'2019') %>%
rowSums(na.rm = TRUE))%>%
relocate(Total, .before = '1990')%>%
arrange(desc(Total))
top.5_diseases <- mortality_rate[mortality_rate$cause %in%
c("Ischemic heart disease","Chronic obstructive pulmonary disease",
"Intracerebral hemorrhage","Ischemic stroke",
"Lower respiratory infections"),]
kable(mortality[1:5,1:16], caption = "Identifying the most deadliest deseases caused by air pollutants (E.g. 1990-1998)")  %>% kable_styling(bootstrap_options = "bordered")
View(mortality)
View(mortality_rate)
View(Airpol)
View(Airpol)
Top10_Airpol <- Airpol_pivotlonger %>% group_by(Country.Code) %>%
summarise(Average = mean(val, na.rm=TRUE))%>%
arrange(desc(Average)) %>% head(10) %>%
left_join(Airpol, by=c("Country.Code")) %>%
gather(year, val, '1990':'2017', factor_key=TRUE) %>%
arrange(desc(Average)) %>%
mutate(Country.Name = fct_reorder2(Country.Name, year, val))
Airpol_pivotlonger <- Airpol %>% gather(year, val, '1990':'2017',
factor_key=TRUE) %>%
arrange(Country.Name)
Airpol_stat <- group_by(Airpol_pivotlonger, year)
Airpol_stat <- summarise(Airpol_stat,
Mean=mean(val, na.rm=TRUE),
Min=min(val, na.rm=TRUE),
Max=max(val, na.rm=TRUE),
Percent_25=quantile(val, probs=c(.25), na.rm=TRUE),
Percent_75=quantile(val, probs=c(.75), na.rm=TRUE))
Airpol_stat <- pivot_longer(Airpol_stat,
c("Min", "Mean", "Max", "Percent_25",
"Percent_75"), names_to = "statistic",
values_to = "val")
ggplot(data = Airpol_stat, aes(x=as.numeric(as.character(year)),y=val))+
geom_line(aes(color = statistic))+
geom_point(aes(color = statistic))+
labs(title = "Distribution of PM 2.5",
subtitle = "Average/Min/Max/Percentile at 25 and 75",
x = "Years",
y = "PM 2.5 (migrogram per cubic meter)",
color = "statistic")+
theme(axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
Top10_Airpol <- Airpol_pivotlonger %>% group_by(Country.Code) %>%
summarise(Average = mean(val, na.rm=TRUE))%>%
arrange(desc(Average)) %>% head(10) %>%
left_join(Airpol, by=c("Country.Code")) %>%
gather(year, val, '1990':'2017', factor_key=TRUE) %>%
arrange(desc(Average)) %>%
mutate(Country.Name = fct_reorder2(Country.Name, year, val))
ggplot(data = Top10_Airpol, aes(x=as.numeric(as.character(year)), y=val)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries with highest PM 2.5",
x = "Years",
y = "PM 2.5 (migrogram per cubic meter)",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
gdp <- read.csv(here::here("data/gdp.csv"), skip = 4, header = TRUE)
colnames(gdp) <- sub("X","",colnames(gdp))
checknaindex_gdp <- which(colSums(!is.na(gdp))==0)
gdp <- gdp[-checknaindex_gdp]
gdp <- gdp[-c(3:4)]
# Countries that not appear in the Table 0 - ISO Country Codes
checkna_gdp <- gdp%>%
arrange(Country.Name)%>%
select(Country.Name, Country.Code) %>%
unique() %>%
left_join(iso_country_codes,
by=c ("Country.Code" = "Country.Code3"))
checkna_gdp <- checkna_gdp[is.na(checkna_gdp[,c("Country.Name.y")]),]
checkna_gdp <- checkna_gdp%>%
rename(Country.Name = "Country.Name.x")%>%
select(Country.Name)
rownames(checkna_gdp) <- 1:nrow(checkna_gdp)
#Create table considering countries from Table 0 - ISO Country Codes
gdp <- gdp%>%
arrange(Country.Name)%>%
right_join(iso_country_codes,
by=c ("Country.Code" = "Country.Code3"))%>%
rename(Country.Name = "Country.Name.y")%>%
select(-Country.Name.x, -Country.Code2)%>%
relocate(Country.Name, .before= Country.Code)
#Countries with empty values across all years
missing_data_gdp <- gdp[rowSums(is.na(select(gdp,3:33)))
== ncol(select(gdp,3:33)), ]
missing_data_gdp <- missing_data_gdp%>%
select(Country.Name)%>%
arrange(Country.Name)
rownames(missing_data_gdp) <- 1:nrow(missing_data_gdp)
# Final Table for GDP
gdp <- gdp[rowSums(is.na(select(gdp,3:33)))
!= ncol(select(gdp,3:33)), ]
gdp_long <- gather(gdp, year, val, '1990':'2020', factor_key=TRUE)
kable(gdp[1:5,1:14], caption = "First 5 rows from GDP Final Table (E.g. 1990-2001)") %>% kable_styling(bootstrap_options = "bordered")
mortality_rate_wider <- mortality_rate %>%
pivot_wider(names_from = year, values_from = val)
mortality <- mortality_rate_wider %>%
mutate(Total = select(., '1990':'2019') %>%
rowSums(na.rm = TRUE))%>%
relocate(Total, .before = '1990')%>%
arrange(desc(Total))
top.5_diseases <- mortality_rate[mortality_rate$cause %in%
c("Ischemic heart disease","Chronic obstructive pulmonary disease",
"Intracerebral hemorrhage","Ischemic stroke",
"Lower respiratory infections"),]
# Visualization
ggplot(top.5_diseases, aes(x = year, y = val)) +
geom_line(aes(color = cause))+
geom_point(aes(color = cause))+
labs(title = "Global Mortality Rate Diseases",
subtitle = "Top 5 deadliest diseases caused by air pollutants per 100k deaths",
x = "Years",
y = "Mortality Rate (per 100k people)",
color = "Diseases")+
theme(axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
Top10_agriculture <- agriculture_pivotlonger %>% group_by(Country.Code) %>%
summarise(Average = mean(val, na.rm=TRUE))%>%
arrange(desc(Average)) %>% head(10) %>%
left_join(agriculture, by=c("Country.Code")) %>%
gather(year, val, '1990':'2016', factor_key=TRUE) %>%
arrange(desc(Average)) %>%
mutate(Country.Name = fct_reorder2(Country.Name, year, val))
agriculture_pivotlonger <- agriculture %>% gather(year, val, '1990':'2016',
factor_key=TRUE) %>%
arrange(Country.Name)
agriculture <- read.csv(here::here("data/agriculture.csv"), header = TRUE, dec = ".")
agriculture[agriculture == ".."] = NA
agriculture[,5:31] <- sapply(agriculture[,c(5:31)], as.numeric)
colnames(agriculture) <- sub("ï..","",sub("..YR.*","",sub("X","",colnames(agriculture))))
agriculture <- filter(agriculture, !Country.Code == "")
# Countries that not appear in the Table 0 - ISO Country Codes
checkna_agriculture <- agriculture%>%
arrange(Country.Name)%>%
select(Country.Name, Country.Code) %>%
unique() %>%
left_join(iso_country_codes,
by=c ("Country.Code" = "Country.Code3"))
checkna_agriculture <- checkna_agriculture[
is.na(checkna_agriculture[,c("Country.Name.y")]),]
checkna_agriculture <- checkna_agriculture%>%
rename(Country.Name = "Country.Name.x")%>%
select(Country.Name)
rownames(checkna_agriculture) <- 1:nrow(checkna_agriculture)
#Create table considering countries from Table 0 - ISO Country Codes
agriculture <- agriculture%>%
arrange(Country.Name)%>%
right_join(iso_country_codes,
by=c ("Country.Code" = "Country.Code3"))%>%
rename(Country.Name = "Country.Name.y")%>%
select(-Country.Name.x, -Country.Code2, -Series.Name, -Series.Code)%>%
relocate(Country.Name, .before= Country.Code)%>%
mutate_if(is.numeric, round, digits=4)
#Countries with empty values across all years
missing_data_agri <- agriculture[rowSums(is.na(select(agriculture,3:29)))
== ncol(select(agriculture,3:29)), ]
missing_data_agri <- missing_data_agri%>%
select(Country.Name)%>%
arrange(Country.Name)
rownames(missing_data_agri) <- 1:nrow(missing_data_agri)
# Final Table for Agriculture
agriculture <- agriculture[rowSums(is.na(select(agriculture,3:29)))
!= ncol(select(agriculture,3:29)), ]
kable(agriculture[1:5,1:14], caption = "First 5 rows from Agriculture Final Table (E.g. 1990-2001)") %>% kable_styling(bootstrap_options = "bordered")
agriculture_pivotlonger <- agriculture %>% gather(year, val, '1990':'2016',
factor_key=TRUE) %>%
arrange(Country.Name)
agriculture_stat <- group_by(agriculture_pivotlonger, year)
agriculture_stat <- summarise(agriculture_stat,
Mean=mean(val, na.rm=TRUE),
Min=min(val, na.rm=TRUE),
Max=max(val, na.rm=TRUE),
Percent_25=quantile(val, probs=c(.25), na.rm=TRUE),
Percent_75=quantile(val, probs=c(.75), na.rm=TRUE))
agriculture_stat <- pivot_longer(agriculture_stat,
c("Mean", "Min", "Max", "Percent_25",
"Percent_75"), names_to = "statistic",
values_to = "val")
ggplot(data = agriculture_stat, aes(x=as.numeric(year), y=val)) +
geom_line(aes(color = statistic))+
geom_point(aes(color = statistic))+
labs(title = "Distribution of Agriculture",
subtitle = "Average/Min/Max/Percentile at 25 and 75",
x = "Years",
y = "% Agriculture of GDP",
color = "statistic")+
theme(axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
Top10_agriculture <- agriculture_pivotlonger %>% group_by(Country.Code) %>%
summarise(Average = mean(val, na.rm=TRUE))%>%
arrange(desc(Average)) %>% head(10) %>%
left_join(agriculture, by=c("Country.Code")) %>%
gather(year, val, '1990':'2016', factor_key=TRUE) %>%
arrange(desc(Average)) %>%
mutate(Country.Name = fct_reorder2(Country.Name, year, val))
ggplot(data = Top10_agriculture, aes(x=as.numeric(as.character(year)), y=val)) +
geom_line(aes(color = Country.Name))+
geom_point(aes(color = Country.Name))+
labs(title = "Top 10 countries Agriculture",
x = "Years",
y = "% Agriculture of GDP",
color = "Countries")+
theme(legend.title=element_blank(),
axis.title=element_text(face="bold"),
plot.title=element_text(face="bold"))
