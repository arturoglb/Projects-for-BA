zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
agriculture_pivotlonger <- agriculture %>%
gather(year, val, "1990":"2016",
factor_key = TRUE
) %>%
arrange(Country.Name)
agriculture_stat <- group_by(agriculture_pivotlonger, year)
agriculture_stat <- summarise(agriculture_stat,
Mean = mean(val, na.rm = TRUE),
Min = min(val, na.rm = TRUE),
Max = max(val, na.rm = TRUE),
Percent_25 = quantile(val, probs = c(.25), na.rm = TRUE),
Percent_75 = quantile(val, probs = c(.75), na.rm = TRUE)
)
agriculture.1 <- agriculture_stat %>%
select(-year) %>%
ts(start = 1990, end = 2016, frequency = 1)
dygraph(agriculture.1,
main = "Distribution of Agriculture",
ylab = "<b>% Agriculture of GDP<b>", xlab = "<b>Years<b>"
) %>%
dySeries("Max", label = "Max") %>%
dySeries("Mean", label = "Mean") %>%
dySeries("Min", label = "Min") %>%
dySeries("Percent_25", label = "Percent 25") %>%
dySeries("Percent_75", label = "Percent 75") %>%
dyRangeSelector(dateWindow = c("1990-01-01", "2016-01-01"))
Top5_agriculture <- agriculture_pivotlonger %>%
group_by(Country.Code) %>%
summarise(Average = mean(val, na.rm = TRUE)) %>%
arrange(desc(Average)) %>%
head(5) %>%
left_join(agriculture_pivotlonger, by = c("Country.Code")) %>%
mutate(Country.Name = fct_reorder2(Country.Name, year, val)) %>%
select(Country.Name, year, val) %>%
pivot_wider(names_from = Country.Name, values_from = val)
Top5_agriculture_col <- colnames(Top5_agriculture)
fig <- plot_ly()
fig <- fig %>% add_trace(x = ~Top5_agriculture$year,
y = ~get(Top5_agriculture_col[2],Top5_agriculture),
name = Top5_agriculture_col[2], mode = "lines+markers",
type = "scatter") %>%
add_trace(x = ~Top5_agriculture$year,
y = ~get(Top5_agriculture_col[3],Top5_agriculture),
name = Top5_agriculture_col[3], mode = "lines+markers",
type = "scatter") %>%
add_trace(x = ~Top5_agriculture$year,
y = ~get(Top5_agriculture_col[4],Top5_agriculture),
name = Top5_agriculture_col[4], mode = "lines+markers",
type = "scatter") %>%
add_trace(x = ~Top5_agriculture$year,
y = ~get(Top5_agriculture_col[5],Top5_agriculture),
name = Top5_agriculture_col[5], mode = "lines+markers",
type = "scatter") %>%
add_trace(x = ~Top5_agriculture$year,
y = ~get(Top5_agriculture_col[6],Top5_agriculture),
name = Top5_agriculture_col[6], mode = "lines+markers",
type = "scatter")
#Set figure title, x and y-axes titles
fig %>% layout(
title = "<b>Top 5 countries most dependent on Agriculture (Average)<b>",
xaxis = list(title="<b>Years<b>"),
yaxis = list(title="<b>% Agriculture of GDP</b>")
)%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
# world map for landlocked countries
landlocked_countries$dummy <- 1
# specify map projection/options
g <- list(
showframe = F,
showcoastlines = T,
showcountries = T,
countrywidth = 0.1,
coastlinewidth = 0.5,
projection = list(type = 'Mercator')
)
fig <- plot_geo(landlocked_countries)
fig <- fig %>% add_trace(
z = ~dummy, color = ~dummy, colors = '#009900',
text = ~Country.or.Territory, locations = ~Country.Code3
)
fig <- fig %>% layout(
title = '<b>Landlocked Countries<b>',
geo = g
) %>% hide_colorbar()
fig
airquality_season.1 <- airquality_season%>%
gather(pollutants, val, "MonthlyAveragepm25":"MonthlyAverageno2", factor_key = TRUE)
#Create a function for plotting the seasonality charts
boxplotSeasonality <- function (inputs) {
if (inputs == "PM2.5") {
pol_column <- "MonthlyAveragepm25"
unit <- "migrogram per cubic meter"
} else if (inputs == "PM10") {
pol_column <- "MonthlyAveragepm10"
unit <- "migrogram per cubic meter"
} else if (inputs == "O3") {
pol_column <- "MonthlyAverageo3"
unit <- "ppb"
} else if (inputs == "SO2") {
pol_column <- "MonthlyAverageso2"
unit <- "ppb"
} else if (inputs == "NO2") {
pol_column <- "MonthlyAverageno2"
unit <- "ppb"
} else if (inputs == "CO") {
pol_column <- "MonthlyAverageco"
unit <- "ppm"
}
pol_season <- airquality_season.1 %>%
filter(pollutants == pol_column)
hcboxplot(x = pol_season$val, var = pol_season$month, name = "Air Pollution Levels", color = "#2980b9", outliers = TRUE)%>%
hc_chart(type = "column") %>%
hc_title(text = sprintf("Distribution of %s by month", inputs)) %>%
hc_yAxis(title = list(text = sprintf("Levels (%s)", unit)),min = 0)%>%
hc_add_series(
data = pol_season,
type = "scatter",
hcaes(x = "month", y = "val", group = "Country.Name")
) %>%
hc_plotOptions(scatter = list(
color = "red",
marker = list(
radius = 2,
symbol = "circle",
lineWidth = 1
)
))  %>%
hc_plotOptions(scatter = list(jitter = list(x = .1, y = 0)))
}
# PM2.5
boxplotSeasonality("PM2.5")
# SO2
boxplotSeasonality("SO2")
# O3
boxplotSeasonality("O3")
# PM10
boxplotSeasonality("PM10")
#   NO2
boxplotSeasonality("NO2")
# CO
boxplotSeasonality("CO")
regression.2016 <- regression.2016 %>%
left_join(landlocked_countries, by = c("Country.Code" =
"Country.Code3")) %>%
rename(Landlock= "dummy") %>% select( -Surrounding.countries)
source(here::here("scripts/setup.R"))
#Total for each year Airpol & Mortality
AirpolGlobal <- mapply(mean,Airpol[c(-1,-2)])
AirpolGlobal <- AirpolGlobal%>%
as.data.frame()%>%
tibble::rownames_to_column("year")%>%
rename("Air Pollution" = ".")
MortalityGlobal <- mortality[,-c(1:7)]
MortalityGlobal <- mapply(sum, MortalityGlobal)
MortalityGlobal <- MortalityGlobal%>%
as.data.frame()%>%
tibble::rownames_to_column("year")%>%
rename("Mortality" = ".")
#Merging Tables
GlobalAirpolMorta <- AirpolGlobal%>%
left_join(MortalityGlobal, by= "year")%>%
select(year,`Air Pollution`, Mortality)
fig <- plot_ly()
fig <- fig %>% add_trace(x = ~GlobalAirpolMorta$year, y = ~GlobalAirpolMorta$`Air Pollution`, name = "Air Pollution", mode = "lines+markers", type = "scatter")
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "<b>Mortality (per 100k people)</b>",
rangemode = "tozero")
fig <- fig %>% add_trace(x = ~GlobalAirpolMorta$year, y = ~GlobalAirpolMorta$Mortality, name = "Mortality", yaxis = "y2", mode = "lines+markers", type = "scatter")
#Set figure title, x and y-axes titles
fig %>% layout(
title = "<b>Air pollution and Mortality Rates change<b>", yaxis2 = ay,
xaxis = list(title="<b>Years<b>"),
yaxis = list(title="<b>Air Pollution (avg. mcg per cubic meter)</b>", rangemode = "tozero")
)%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
# Prepare the table with the years available in Airpol
prep.mortality <- mortality_rate_country_wide %>%
filter(year == "1990" | year == "1995" | year == "2000" | year == "2005" |
year == "2010" | year == "2011" | year == "2012" | year == "2013" |
year == "2014" | year == "2015" | year == "2016" | year == "2017")
prep.airpol <- Airpol %>%
gather(year, val, "1990":"2017", factor_key = FALSE) %>%
rename("Air Pollution" = "val")
prep.airpol$year <- as.numeric(as.character(prep.airpol$year))
airpol_and_mortality <- prep.mortality %>%
right_join(prep.airpol,
by = c(
"Country.Code3" = "Country.Code", "year" = "year",
"location" = "Country.Name"
)
) %>%
relocate("Air Pollution", .before = "Diabetes mellitus type 2")
prep.corr <- airpol_and_mortality[, -c(1:4)]
top.10.corr <- cor(prep.corr)
top.10.corr <- data.frame(top.10.corr)
top.10.corr <- top.10.corr %>%
arrange(desc(Air.Pollution))
diseases <- top.10.corr %>%
tibble::rownames_to_column("Diseases")%>%
select(Diseases, Air.Pollution) %>%
slice(-1)%>%
tibble::rownames_to_column("Priority")%>%
rename('Air Pollution Correlation' = Air.Pollution)
kable(diseases[c(1:5,19), -1], caption = "Diseases ordered by highest correlation to Air Pollution") %>%
kable_styling(bootstrap_options = "bordered")
topdeath.corr <- data.frame(cor(prep.corr[,c("Air Pollution",top.5_diseases$cause[1:5])]))
diseases_topdeath <- topdeath.corr %>%
tibble::rownames_to_column("Diseases")%>%
select(Diseases, Air.Pollution) %>%
slice(-1)%>%
tibble::rownames_to_column("Priority")%>%
rename('Air Pollution Correlation' = Air.Pollution)
kable(diseases_topdeath[c(1:5), -1], caption = "Diseases ordered by highest mortality rates") %>%
kable_styling(bootstrap_options = "bordered")
mapped_data <- joinCountryData2Map(mortality_rate_country_wide_current, joinCode = "ISO3", nameJoinColumn = "Country.Code3", verbose = FALSE)
country_lon_lat <- data.frame(Country.Code3 = mapped_data$ISO3.1, Country = mapped_data$ADMIN.1, Longitude = mapped_data$LON, Latitude = mapped_data$LAT)
country_lon_lat <- mutate(country_lon_lat, Type = case_when(Latitude <= -23.43644 ~ "South", Latitude >= 23.43644 ~ "North", TRUE ~ "Tropics"))
#Create a function for plotting the seasonality charts
plotSeasonality <- function (inputs) {
Type_select <- inputs
airquality_season_temp <- airquality_season %>%
left_join(country_lon_lat, by = "Country.Code3") %>%
filter(Type == Type_select)
airquality_season_avg <- airquality_season_temp %>%
group_by(month) %>%
summarise(
pm25 = mean(MonthlyAveragepm25, na.rm = TRUE),
co = mean(MonthlyAverageco, na.rm = TRUE),
pm10 = mean(MonthlyAveragepm10, na.rm = TRUE),
o3 = mean(MonthlyAverageo3, na.rm = TRUE),
so2 = mean(MonthlyAverageso2, na.rm = TRUE),
no2 = mean(MonthlyAverageno2, na.rm = TRUE))
monthabb <- month.abb[as.numeric(airquality_season_avg$month)]
fig <- plot_ly()
fig <- fig %>%
add_trace(x = ~airquality_season_avg$month, y = ~airquality_season_avg$pm25, name = "PM2.5", mode = "lines+markers", type = "scatter") %>%
add_trace(x = ~airquality_season_avg$month, y = ~airquality_season_avg$pm10, name = "PM10", mode = "lines+markers", type = "scatter") %>%
add_trace(x = ~airquality_season_avg$month, y = ~airquality_season_avg$co, name = "CO", mode = "lines+markers", type = "scatter", yaxis = "y2") %>%
add_trace(x = ~airquality_season_avg$month, y = ~airquality_season_avg$o3, name = "O3", mode = "lines+markers", type = "scatter", yaxis = "y2") %>%
add_trace(x = ~airquality_season_avg$month, y = ~airquality_season_avg$so2, name = "SO2", mode = "lines+markers", type = "scatter", yaxis = "y2") %>%
add_trace(x = ~airquality_season_avg$month, y = ~airquality_season_avg$no2, name = "NO2", mode = "lines+markers", type = "scatter", yaxis = "y2")
ay <- list(
overlaying = "y",
side = "right",
title = "<b>CO(ppm) and O3, SO2, NO2(ppb)</b>",
rangemode = "tozero", automargin = T)
#Set figure title, x and y-axes titles
fig %>% layout(
title = sprintf("<b>%s - Monthly air pollution levels<b>",inputs),
yaxis2 = ay,
xaxis = list(title = " ",tickvals = c(1,2,3,4,5,6,7, 8,9,10,11,12),ticktext = monthabb),
yaxis = list(title="<b>PM2.5, PM10 (mcg per cubic meter)<b>", rangemode = "tozero"),
showlegend = TRUE,
legend = list(orientation = 'h')
)
}
#Plot "North"
plotSeasonality("North")
#Plot "South"
plotSeasonality("South")
#Plot "Tropics"
plotSeasonality("Tropics")
prep.gdp <- gdp %>%
gather(year, val, "1990":"2020", factor_key = FALSE) %>%
rename("GDP" = "val")
prep.gdp$year <- as.numeric(as.character(prep.gdp$year))
prep.agri <- agriculture %>%
gather(year, val, "1990":"2016", factor_key = FALSE) %>%
rename("Agriculture" = "val")
prep.agri$year <- as.numeric(as.character(prep.agri$year))
agri_airpol_gdp <- prep.airpol %>%
left_join(prep.gdp,
by = c(
"Country.Code" = "Country.Code", "year" = "year",
"Country.Name" = "Country.Name"
)
) %>%
left_join(prep.agri,
by = c(
"Country.Code" = "Country.Code", "year" = "year",
"Country.Name" = "Country.Name"
)
)
regression.2016 <- agri_airpol_gdp %>%
filter(year == "2016")
regression.2016 <- na.omit(regression.2016)
regression.2016 <- rename(regression.2016, Air.Pollution = 'Air Pollution')
mod1 <- lm(Air.Pollution ~ GDP, data = regression.2016)
mod2 <- lm(Air.Pollution ~ Agriculture, data = regression.2016)
mod3 <- lm(Air.Pollution ~ Agriculture + GDP, data = regression.2016)
fstat <- summary(mod1)$fstatistic
pval_mod1 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(mod2)$fstatistic
pval_mod2 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(mod3)$fstatistic
pval_mod3 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
stargazer::stargazer(mod1,mod2,mod3, type = "html",
add.lines = list(c("F Statistic (p-value)",sprintf("%.2e",pval_mod1),sprintf("%.2e",pval_mod2),sprintf("%.2e",pval_mod3))), table.layout = "=ldc-tsa-n")
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
"Slope =",signif(fit$coef[[2]], 5),
"P-value =",signif(summary(fit)$coef[2,4], 5)))
}
g <- ggplotRegression(mod1)
a <- ggplotRegression(mod2)
gg <- ggplotly(g)
aa <- ggplotly(a)
subplot(aa,gg, nrows = 1,shareY = TRUE, titleX = TRUE)%>%
layout(title= "Determinant factors for Air Pollution",
annotations = list(
list(
x = 0.2,
y = 1.0,
text = sprintf("      Adj R2= %.2f | p-value = %.2e",summary(mod2)$adj.r.squared,anova(mod2)$'Pr(>F)'[1]),
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE),
list(
x = 0.8,
y = 1,
text = sprintf("Adj R2= %.2f | p-value = %.2e     ",summary(mod1)$adj.r.squared,anova(mod1)$'Pr(>F)'[1]),
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE)))
regression.2016 <- regression.2016 %>%
left_join(landlocked_countries, by = c("Country.Code" =
"Country.Code3")) %>%
rename(Landlock= "dummy") %>% select( -Surrounding.countries)
regression.2016$Landlock[sapply(regression.2016$Landlock, is.na)] <- 0
mod4 <- lm(Air.Pollution ~ Landlock, data = regression.2016)
mod5 <- lm(Air.Pollution ~ Agriculture + Landlock, data = regression.2016)
mod6 <- lm(Air.Pollution ~ GDP+Agriculture + Landlock, data = regression.2016)
fstat <- summary(mod4)$fstatistic
pval_mod4 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(mod5)$fstatistic
pval_mod5 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(mod6)$fstatistic
pval_mod6 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
stargazer::stargazer(mod4, mod5,mod6, type = "html",
add.lines = list(c("F Statistic (p-value)",sprintf("%.2e",pval_mod4),sprintf("%.2e",pval_mod5),sprintf("%.2e",pval_mod6))), table.layout = "=ldc-tsa-n")
g <- ggplotRegression(mod4)
a <- ggplotRegression(mod5)
gg <- ggplotly(g)
aa <- ggplotly(a)
subplot(gg,aa, nrows = 1,shareY = TRUE, titleX = TRUE)%>%
layout(title= "Determinant factors for Air Pollution",
annotations = list(
list(
x = 0.2,
y = 1.0,
text = sprintf("      Adj R2= %.2f | p-value = %.2e",summary(mod4)$adj.r.squared,anova(mod4)$'Pr(>F)'[1]),
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE),
list(
x = 0.8,
y = 1,
text = sprintf("      Adj R2= %.2f | p-value = %.2e",summary(mod5)$adj.r.squared,anova(mod5)$'Pr(>F)'[1]),
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE)))
airquality_by_year <- airquality_daily %>%
mutate(
year = format(Date, "%y"),
year = format(Date, "%Y")
) %>%
group_by(year, Country.Name) %>%
summarise(
"PM2.5" = mean(Averagepm25, na.rm = TRUE),
"CO" = mean(Averageco, na.rm = TRUE),
"PM10" = mean(Averagepm10, na.rm = TRUE),
"O3" = mean(Averageo3, na.rm = TRUE),
"SO2" = mean(Averageso2, na.rm = TRUE),
"NO2" = mean(Averageno2, na.rm = TRUE)
) %>%
relocate(year, .before = "PM2.5") %>%
left_join(iso_country_codes, by = "Country.Name") %>%
select(-Country.Code2) %>%
relocate(Country.Code3, .before = year)
airquality_by_year[sapply(airquality_by_year, is.nan)] <- NA
airquality_by_year$year <- as.numeric(as.character(airquality_by_year$year))
prep.mortality.Q2.3 <- select(
prep.mortality, location, Country.Code3, year,
"Neonatal preterm birth", "Other neonatal disorders",
"Sudden infant death syndrome", "Lower respiratory infections",
"Hemolytic disease and other neonatal jaundice"
)
AIC.Q2.3 <- airquality_by_year %>%
left_join(prep.mortality.Q2.3,
by = c(
"Country.Code3" = "Country.Code3",
"year" = "year", "Country.Name" = "location"
)
) %>%
left_join(prep.gdp,
by = c(
"Country.Code3" = "Country.Code", "year" = "year",
"Country.Name" = "Country.Name"
)
)
Q2.3_2016 <- AIC.Q2.3 %>%
filter(year == "2016") %>%
rename(Neonatal.preterm.birth = "Neonatal preterm birth", Other.neonatal.disorders = "Other neonatal disorders", Sudden.infant.death.syndrome = "Sudden infant death syndrome", Lower.respiratory.infections = "Lower respiratory infections", Hemolytic.disease.and.other.neonatal.jaundice = "Hemolytic disease and other neonatal jaundice")
Q2.3_2016 <- na.omit(Q2.3_2016)
explore <- subset(Q2.3_2016, select = c("PM2.5", "CO", "PM10", "O3", "SO2", "NO2", "GDP"))
pairs.panels(explore, lm = TRUE, cor = TRUE)
# Regression considering Neonatal preterm birth
mynull1 <- lm(Neonatal.preterm.birth ~ 1, data = Q2.3_2016)
myfull1 <- lm(Neonatal.preterm.birth ~ PM10 + CO + O3 + SO2 + NO2 + GDP,
data = Q2.3_2016)
forward.AIC1 <- step(mynull1, scope = list(lower = mynull1, upper = myfull1),
direction = "forward")
regression1 <- ols_step_forward_aic(myfull1)
plot(regression1)
fstat <- summary(myfull1)$fstatistic
pval_myfull1 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(forward.AIC1)$fstatistic
pval_AIC1 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
stargazer::stargazer(myfull1,forward.AIC1, type = "html",
add.lines = list(c("F Statistic (p-value)",sprintf("%.2e",pval_myfull1),sprintf("%.2e",pval_AIC1))), table.layout = "=ldc-tsa-n")
#  Regression considering Other neonatal disorders
mynull2 <- lm(Other.neonatal.disorders ~ 1, data = Q2.3_2016)
myfull2 <- lm(Other.neonatal.disorders ~ PM10 + CO + O3 + SO2 + NO2 + GDP,
data = Q2.3_2016)
forward.AIC2 <- step(mynull2, scope = list(lower = mynull2, upper = myfull2),
direction = "forward")
regression2 <- ols_step_forward_aic(myfull2)
plot(regression2)
fstat <- summary(myfull2)$fstatistic
pval_myfull2 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(forward.AIC2)$fstatistic
pval_AIC2 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
stargazer::stargazer(myfull2,forward.AIC2, type = "html",
add.lines = list(c("F Statistic (p-value)",sprintf("%.2e",pval_myfull2),sprintf("%.2e",pval_AIC2))), table.layout = "=ldc-tsa-n")
#  Regression considering Sudden infant death syndrome
mynull3 <- lm(Sudden.infant.death.syndrome ~ 1, data = Q2.3_2016)
myfull3 <- lm(Sudden.infant.death.syndrome ~ PM10 + CO + O3 + SO2 + NO2 + GDP,
data = Q2.3_2016)
forward.AIC3 <- step(mynull3, scope = list(lower = mynull3, upper = myfull3),
direction = "forward")
regression3 <- ols_step_forward_aic(myfull3)
plot(regression3)
fstat <- summary(myfull3)$fstatistic
pval_myfull3 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(forward.AIC3)$fstatistic
pval_AIC3 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
stargazer::stargazer(myfull3,forward.AIC3, type = "html",
add.lines = list(c("F Statistic (p-value)",sprintf("%.2e",pval_myfull3),sprintf("%.2e",pval_AIC3))), table.layout = "=ldc-tsa-n")
#  Regression considering Lower respiratory infections
mynull4 <- lm(Lower.respiratory.infections ~ 1, data = Q2.3_2016)
myfull4 <- lm(Lower.respiratory.infections ~ PM10 + CO + O3 + SO2 + NO2 + GDP,
data = Q2.3_2016)
forward.AIC4 <- step(mynull4, scope = list(lower = mynull4, upper = myfull4),
direction = "forward")
regression4 <- ols_step_forward_aic(myfull4)
plot(regression4)
fstat <- summary(myfull4)$fstatistic
pval_myfull4 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(forward.AIC4)$fstatistic
pval_AIC4 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
stargazer::stargazer(myfull4,forward.AIC4, type = "html",
add.lines = list(c("F Statistic (p-value)",sprintf("%.2e",pval_myfull4),sprintf("%.2e",pval_AIC4))), table.layout = "=ldc-tsa-n")
#  Regression considering Hemolytic disease and other neonatal jaundice
mynull5 <- lm(Hemolytic.disease.and.other.neonatal.jaundice ~ 1, data = Q2.3_2016)
myfull5 <- lm(Hemolytic.disease.and.other.neonatal.jaundice ~ PM10 + CO + O3 + SO2 + NO2 + GDP, data = Q2.3_2016)
forward.AIC5 <- step(mynull5, scope = list(lower = mynull5, upper = myfull5),
direction = "forward")
regression5 <- ols_step_forward_aic(myfull5)
plot(regression5)
fstat <- summary(myfull5)$fstatistic
pval_myfull5 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat <- summary(forward.AIC5)$fstatistic
pval_AIC5 <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
stargazer::stargazer(myfull5,forward.AIC5, type = "html",
add.lines = list(c("F Statistic (p-value)",sprintf("%.2e",pval_myfull5),sprintf("%.2e",pval_AIC5))), table.layout = "=ldc-tsa-n")
